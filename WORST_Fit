#include <stdio.h>

void implimentWorstFit(int blockSize[], int blocks, int processSize[], int processes)
{

    int allocation[processes];
    int occupied[blocks];
    int i,j;
    for( i = 0; i < processes; i++){
        allocation[i] = -1;
    }

    for( i = 0; i < blocks; i++){
        occupied[i] = 0;
    }
    for ( i=0; i < processes; i++)
    {
        int indexPlaced = -1;
        for( j = 0; j < blocks; j++)
        {
            if(blockSize[j] >= processSize[i] && !occupied[j])
            {
                    if (indexPlaced == -1)
                    indexPlaced = j;
                    else if (blockSize[indexPlaced] < blockSize[j])
                    indexPlaced = j;
            }
        }
        if (indexPlaced != -1)
        {
            allocation[i] = indexPlaced;
            occupied[indexPlaced] = 1;
            blockSize[indexPlaced] -= processSize[i];
        } }

    printf("\nProcess No.\tProcess Size\tBlock no.\n");
    for ( i = 0; i < processes; i++)
    {
        printf("%d \t\t\t %d \t\t\t", i+1, processSize[i]);
        if (allocation[i] != -1)
            printf("%d\n",allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }
}
int main()
{
    int blockSize[20];
    int processSize[20];
    int i,n,m;
    printf("enter the number of blocks:");
    scanf("%d",&n);
        for(i=1;i<=n;i++)
    {
    printf("enter the %d block size:",i);
    scanf("%d",&blockSize[i]);
    }
    printf("enter the no of process:");
    scanf("%d",&m);
        for(i=1;i<=m;i++)
        {         printf("enter the %d size of process:",i);

                scanf("%d",&processSize[i]);
        }
   implimentWorstFit(blockSize,n,processSize,m);
    return 0;

}
